package com.medicalsupport.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.CannotAcquireLockException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.UncategorizedSQLException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.medicalsupport.entity.Admin;
import com.medicalsupport.entity.Member;
import com.medicalsupport.service.MemberService;
import com.medicalsupport.httpentity.MemberReqParam;
import com.medicalsupport.httpentity.MemberResponseRow;
import com.medicalsupport.httpentity.MemberResponse;

@Controller
public class MemberManageController {
	@Autowired
	private MemberService memberService;
	
	@RequestMapping(value = "/member")
	public String memberManage() {
		return "member/member";
	}
	
	@RequestMapping(value = "/listMember")
	public void listMember(HttpServletResponse response,MemberReqParam memberReqParam) throws IOException, ParseException{
		List<Member> memberList = memberService.listMember(memberReqParam);
		int totalPageCount = memberService.totalPageCount(memberReqParam);
		List<MemberResponseRow> memberResponseList = new ArrayList<MemberResponseRow>();
		
		for (int i=0;i<memberList.size();i++) {
			MemberResponseRow memberResponseRow = new MemberResponseRow(i, memberList.get(i));
			memberResponseList.add(memberResponseRow);
		}
		
		MemberResponse memberResponse=new MemberResponse();
		memberResponse.setPage(memberReqParam.getPage());        //设置
		memberResponse.setTotal(totalPageCount);
		memberResponse.setRows(memberResponseList);
		Gson gson = new Gson();
		String resultString = gson.toJson(memberResponse);
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		out.write(resultString);
		out.close();
	}
	
	@RequestMapping(value = "/addMember")
	public ModelAndView toAdd() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("member/memberInfo");
		return mv;
	}
	
	@RequestMapping(value = "/editMember")
	public ModelAndView toEdit(@RequestParam String memberID) {
		ModelAndView mv = new ModelAndView();
		Member member = memberService.getMemberByID(memberID);
		mv.addObject("editMember",member);
		mv.setViewName("member/memberInfo");
		return mv;
	}
	
	@RequestMapping(value = "/saveMember", method = RequestMethod.POST)
	public ModelAndView toSave(Member member) {
		ModelAndView mv = new ModelAndView();
		
		if(member.getMemberID() == null || member.getMemberID() == "")
		{
			if(memberService.insertMember(member) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		else
		{
			if(memberService.updateMember(member) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		mv.setViewName("admin/save_result");
		return mv;
	}
	
	@RequestMapping(value = "/memberPoints")
	public String memberPoints()
	{
		return "member/memberPoints";
	}
	
	@RequestMapping(value = "/editPoints")
	public ModelAndView editPoints(@RequestParam String memberID)
	{
		ModelAndView mv = new ModelAndView();
		Member member = memberService.getMemberByID(memberID);
		mv.addObject("memberForPoints",member);
		mv.setViewName("member/memberPointsInfo");
		return mv;
	}
	
	@RequestMapping(value = "/saveMemberPoints")
	public ModelAndView savePoints(Member member)
	{
        ModelAndView mv = new ModelAndView();
		if(memberService.updateMemberPoints(member) == false)
		{
			mv.addObject("msg", "保存失败!");
		}
		else
		{
			mv.addObject("msg", "保存成功!");
		}
		mv.setViewName("admin/save_result");
		return mv;
	}
	
	@RequestMapping(value = "/memberPointsHistory")
	public String memberPointsHistory()
	{
		return "member/memberPointsHistory";
	}
	
	@RequestMapping(value = "/memberExchangeHistory")
	public String memberExchangeHistory()
	{
		return "member/memberExchangeHistory";
	}
	
	
	@RequestMapping(value = "/listPointsHistory")
	public void listPointsHistory(HttpServletResponse response,MemberReqParam memberReqParam) throws IOException, ParseException{
		List<Member> memberList = memberService.listMember(memberReqParam);
		int totalPageCount = memberService.totalPageCount(memberReqParam);
		List<MemberResponseRow> memberResponseList = new ArrayList<MemberResponseRow>();
		
		for (int i=0;i<memberList.size();i++) {
			MemberResponseRow memberResponseRow = new MemberResponseRow(i, memberList.get(i));
			memberResponseList.add(memberResponseRow);
		}
		
		MemberResponse memberResponse=new MemberResponse();
		memberResponse.setPage(memberReqParam.getPage());        //设置
		memberResponse.setTotal(totalPageCount);
		memberResponse.setRows(memberResponseList);
		Gson gson = new Gson();
		String resultString = gson.toJson(memberResponse);
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		out.write(resultString);
		out.close();
	}
	
	@RequestMapping(value = "/memberLogin")
	public String memberLogin() {
		return "member/index";
	}
}
