package com.medicalsupport.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.CannotAcquireLockException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.UncategorizedSQLException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.medicalsupport.entity.Admin;
import com.medicalsupport.entity.Department;
import com.medicalsupport.entity.Product;
import com.medicalsupport.service.DepartmentService;
import com.medicalsupport.service.ProductService;
import com.medicalsupport.httpentity.DepartmentReqParam;
import com.medicalsupport.httpentity.DepartmentResponse;
import com.medicalsupport.httpentity.DepartmentResponseRow;
import com.medicalsupport.httpentity.ProductReqParam;
import com.medicalsupport.httpentity.ProductResponse;
import com.medicalsupport.httpentity.ProductResponseRow;

@Controller
public class OrganizationManageController {
	
	@Autowired
	private DepartmentService departmentService;
	
	@Autowired
	private ProductService productService;
	
	@RequestMapping(value = "/departmentManage")
	public String departmentManage() {
		return "organization/departmentManage";
	}
	
	@RequestMapping(value = "/productManage")
	public String productManage() {
		return "organization/productManage";
	}
	
	@RequestMapping(value = "/listDepartment")
	public void getlistDepartment(HttpServletResponse response,DepartmentReqParam departmentReqParam) throws IOException, ParseException {
		List<Department> departmentList = departmentService.listDepartment(departmentReqParam);
		int totalPageCount = departmentService.totalPageCount(departmentReqParam);
		List<DepartmentResponseRow> departmentResponseList = new ArrayList<DepartmentResponseRow>();
		
		for (int i=0;i<departmentList.size();i++) {
			if(departmentList.get(i).getNote()==null || departmentList.get(i).getNote()=="") {
				departmentList.get(i).setNote("无");
			}
			DepartmentResponseRow departmentResponseRow = new DepartmentResponseRow(i, departmentList.get(i));
			departmentResponseList.add(departmentResponseRow);
		}
		
		DepartmentResponse departmentResponse=new DepartmentResponse();
		departmentResponse.setPage(departmentReqParam.getPage());        //设置
		departmentResponse.setTotal(totalPageCount);
		departmentResponse.setRows(departmentResponseList);
		Gson gson = new Gson();
		String resultString = gson.toJson(departmentResponse);
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		out.write(resultString);
		out.close();
	}
	
	@RequestMapping(value = "/listProduct")
	public void getlistProduct(HttpServletResponse response,ProductReqParam productReqParam,HttpSession session) throws IOException, ParseException {
		Admin admin = (Admin) session.getAttribute("admin");
		if(admin.getDepartmentId()!=0) {
			productReqParam.setDepartmentId(admin.getDepartmentId());
		}
	    List<Product> productList = productService.listProduct(productReqParam);
		int totalPageCount = productService.totalPageCount(productReqParam);
		List<ProductResponseRow> productResponseList = new ArrayList<ProductResponseRow>();
		
		for (int i=0;i<productList.size();i++) {
			ProductResponseRow productResponseRow = new ProductResponseRow(i, productList.get(i));
			productResponseList.add(productResponseRow);
		}
		
		ProductResponse productResponse=new ProductResponse();
		productResponse.setPage(productReqParam.getPage());        //设置
		productResponse.setTotal(totalPageCount);
		productResponse.setRows(productResponseList);
		Gson gson = new Gson();
		String resultString = gson.toJson(productResponse);
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		out.write(resultString);
		out.close();
	}
	
	@RequestMapping(value = "/addDepartment")
	public String toAddDepartment() {
		return "organization/departmentInfo";
	}
	
	@RequestMapping(value = "/saveDepartment", method = RequestMethod.POST)
	public ModelAndView toSaveDepartment(HttpSession session, Department department) {
		ModelAndView mv = new ModelAndView();
		Admin admin = (Admin) session.getAttribute("admin");
		department.setCreator(admin.getAdminName());
		department.setCreateTime(new Date());
		if(department.getNote()==null || department.getNote()=="") {
			department.setNote("无");
		}
		if(department.getId() == null || department.getId().intValue() == 0)
		{
			if(departmentService.insertDepartment(department) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		else
		{
			if(departmentService.updateDepartment(department) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		mv.setViewName("admin/save_result");
		return mv;
	}
	
	@RequestMapping(value = "/editDepartment")
	public ModelAndView toEditDepartment(@RequestParam int id) {
		ModelAndView mv = new ModelAndView();
		Department department = departmentService.getDepartmentByID(id);
		mv.addObject("department",department);
		mv.setViewName("organization/departmentInfo");
		return mv;
	}
	
	@RequestMapping(value = "/deleteDepartments")
	public void toDeleteDepartment(@RequestParam String ids, PrintWriter out) {
		String[] allId = ids.split(",");
		departmentService.deleteDepartments(allId);
		String msg ="{\"result\":\"success\"}";
		out.write(msg);
		out.close();
	}
	
	@RequestMapping(value = "/addProduct")
	public String toAddProduct() {
		return "organization/productInfo";
	}
	
	@RequestMapping(value = "/saveProduct", method = RequestMethod.POST)
	public ModelAndView toSaveProduct(HttpSession session,Product product) {
		ModelAndView mv = new ModelAndView();
		Admin admin = (Admin) session.getAttribute("admin");
		product.setCreateTime(new Date());
		product.setCreator(admin.getAdminName());
		if(product.getId() == null || product.getId().intValue() == 0)
		{
			if(productService.insertProduct(product) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		else
		{
			if(productService.updateProduct(product) == false)
			{
				mv.addObject("msg", "保存失败!");
			}
			else
			{
				mv.addObject("msg", "保存成功!");
			}
		}
		mv.setViewName("admin/save_result");
		return mv;
	}
	
	@RequestMapping(value = "/editProduct")
	public ModelAndView toEditProduct(@RequestParam int id) {
		ModelAndView mv = new ModelAndView();
		Product product = productService.getProductByID(id);
		mv.addObject("product",product);
		mv.setViewName("organization/productInfo");
		return mv;
	}
	
	@RequestMapping(value = "/deleteProducts")
	public void toDelete(@RequestParam String ids, PrintWriter out) {
		String[] allId = ids.split(",");
		productService.deleteProducts(allId);
		String msg ="{\"result\":\"success\"}";
		out.write(msg);
		out.close();
	}
	
	@RequestMapping(value = "/selectProductInfo")
	@ResponseBody
	public Object selectProductInfo(@RequestParam String productId) {
		List<Product> productList = new ArrayList<Product>();
		try{
			productList = productService.selectProductInfo(productId);
		}catch(Exception e){
			return "-1";
		}
		return productList;
	}
}
